{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Process Compose \ud83d\udd25","text":"<p>Process Compose is a simple and flexible scheduler and orchestrator to manage non-containerized applications.</p>"},{"location":"#why-was-it-made","title":"Why was it made?","text":"<p>Because sometimes you just don't want to deal with docker files, volume definitions, networks and docker registries. Since it's written in Go, Process Compose is a single binary file and has no other dependencies.</p> <p>Once installed, you just need to describe your workflow using a simple YAML schema in a file called <code>process-compose.yaml</code>:</p> <pre><code>version: \"0.5\"\n\nprocesses:\n  hello:\n    command: echo 'Hello World from Process Compose'\n</code></pre> <p>And start it by running <code>process-compose up</code> from your terminal.</p> <p>Check the Documentation for more advanced use cases.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Processes execution (in parallel or/and serially)</li> <li>Processes dependencies and startup order</li> <li>Process recovery policies</li> <li>Manual process [re]start</li> <li>Processes arguments <code>bash</code> or <code>zsh</code> style (or define your own shell)</li> <li>Per process and global environment variables using envsubst</li> <li>Per process or global (single file) logs</li> <li>Health checks (liveness and readiness)</li> <li>Terminal User Interface (TUI) or CLI modes</li> <li>Forking (services or daemons) processes</li> <li>REST API (OpenAPI a.k.a Swagger)</li> <li>Logs caching</li> <li>Functions as both server and client</li> <li>Configurable shortcuts</li> <li>Merge Configuration Files</li> <li>Namespaces</li> <li>Run Multiple Replicas of a Process</li> <li>Run a Foreground Process </li> <li>Themes Support</li> <li>On the fly Process configuration edit</li> <li>On the fly Project update</li> <li>Recipes Management</li> </ul>"},{"location":"client/","title":"Remote Client","text":""},{"location":"client/#rest-api","title":"REST API","text":"<p>Open API client and documentation is available on: http://localhost:8080</p> <p>Default port is <code>8080</code>. Specify your own port:</p> <pre><code>process-compose -p 8080\n</code></pre> <p>Alternatively use <code>PC_PORT_NUM</code> environment variable:</p> <pre><code>PC_PORT_NUM=8080 process-compose\n</code></pre>"},{"location":"client/#unix-domain-sockets-uds","title":"Unix Domain Sockets (UDS)","text":"<p>Instead of TCP communication mode, on *nix based systems, you can use Unix Domain Sockets (on the same host only).</p> <p>There are 3 configuration options:</p> <ol> <li>Auto socket path based on <code>PID</code>: <code>process-compose -U</code> will start Process Compose in UDS mode and create a socket file under <code>&lt;TempDir&gt;/process-compose-&lt;pid&gt;.sock</code></li> <li>Manual socket path with CLI flag: <code>process-compose --unix-socket /path/to/socket/file</code> will start Process Compose in UDS mode and create the specified socket file. The directory should exist.</li> <li>Manual socket path with environment variable: <code>PC_SOCKET_PATH=\"/path/to/socket/file\" process-compose</code> will start Process Compose in UDS mode and create the specified socket file. The directory should exist.</li> </ol>"},{"location":"client/#client-mode","title":"Client Mode","text":"<p>Process compose can also connect to itself as a client. Available commands:</p>"},{"location":"client/#processes-list","title":"Processes List","text":"<pre><code>process-compose process list #lists available processes\n</code></pre>"},{"location":"client/#process-start","title":"Process Start","text":"<pre><code>process-compose process start [PROCESS] #starts one of the available non running processes\n</code></pre>"},{"location":"client/#process-stop","title":"Process Stop","text":"<pre><code>process-compose process stop [PROCESS] #stops one of the running processes\n</code></pre>"},{"location":"client/#process-restart","title":"Process Restart","text":"<pre><code>process-compose process restart [PROCESS] #restarts one of the available processes\n</code></pre> <p>Restart will wait <code>process.availability.backoff_seconds</code> seconds between <code>stop</code> and <code>start</code> of the process. If not configured the default value is 1s.</p> <p> New remote commands are added constantly. For full list run: <pre><code>process-compose --help\n</code></pre></p> <p>By default, the client will try to use the default port <code>8080</code> and default address <code>localhost</code> to connect to the locally running instance of process-compose. You can provide deferent values:</p> <pre><code>process-compose -p PORT process -a ADDRESS list\n</code></pre>"},{"location":"client/#tui-client","title":"TUI Client","text":"<p>For situations when process-compose was started in headless mode <code>-t=false</code>, another process-compose instance (client) can run in a fully remote TUI mode:</p> <pre><code>process-compose attach\n</code></pre> <p>The client can connect to a:</p> <ul> <li>Remote server</li> <li>Docker container</li> <li>Headless and TUI process-compose instances</li> </ul> <p>In remote mode the Process Compose logo will be replaced from \ud83d\udd25 to \u26a1and show a remote server <code>hostname</code> instead of a local <code>hostname</code>.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/#variable-expansion","title":"Variable Expansion","text":"<p>Process Compose uses envsubst for advanced environment variable expansion, supporting functions like <code>${VAR^^}</code> (convert to uppercase), <code>${HOST%:8000}</code> (remove suffix), <code>${VAR/old/new}</code> (pattern replacement), and more - see supported functions.</p>"},{"location":"configuration/#local-per-process","title":"Local (Per Process)","text":"<pre><code>processes:\n  process2:\n    environment:\n      - \"I_AM_LOCAL_EV=42\"\n</code></pre>"},{"location":"configuration/#global","title":"Global","text":"<pre><code>environment:\n  - \"I_AM_GLOBAL_EV=42\"\n\nprocesses:\n  process2:\n    command: \"chmod 666 /path/to/file\"\n  environment:\n    - \"I_AM_LOCAL_EV=42\"\n</code></pre> <p>Default environment variables:</p> <p><code>PC_PROC_NAME</code> - Defines the process name as defined in the <code>process-compose.yaml</code> file.</p> <p><code>PC_REPLICA_NUM</code> - Defines the process replica number. Useful for port collision avoidance for processes with multiple replicas.</p>"},{"location":"configuration/#env-file","title":".env file","text":"<p><pre><code>VERSION='1.2.3'\nDB_USER='USERNAME'\nDB_PASSWORD='VERY_STRONG_PASSWORD'\nWAIT_SEC=60\n</code></pre> Override ${var} and $var from environment variables or .env values <pre><code>processes:\n  downloader:\n    command: \"python3 data_downloader_${VERSION}.py -s 'data.source.B.uri'\"\n    availability:\n      restart: \"always\"\n      backoff_seconds: ${WAIT_SEC}\n    environment:\n      - 'OUTPUT_DIR=/path/to/B/data'\n</code></pre></p> <p>By default the <code>.env</code> file in the current directory is used if exists. It is possible to specify other file(s) to be used instead:</p> <pre><code>process-compose -e .env -e .env.local -e .env.dev\n</code></pre> <p>For situations where the you would like to disable the automatic <code>.env</code> file loading you might want to use the <code>--disable-dotenv</code> flag.</p>"},{"location":"configuration/#disabling-dotenv-environment-variable-injection-is_dotenv_disabled","title":"Disabling Dotenv Environment Variable Injection (<code>is_dotenv_disabled</code>)","text":"<p>By default, Process Compose reads variables from specified <code>.env</code> files (or a default <code>.env</code> file) and injects them into the environment of all managed processes. This is often convenient, but can interfere with processes that have their own built-in mechanisms for loading configuration directly from a <code>.env</code> file, especially when relying on that mechanism for configuration updates or hot-reloading.</p> <p>The core issue arises from environment variable precedence: environment variables explicitly set for a process (including those injected by Process Compose from <code>.env</code> files) typically override variables loaded by the process itself from its own <code>.env</code> file reading mechanism (e.g., using libraries like <code>godotenv</code>, <code>python-dotenv</code>, etc.). This means that if you change a variable in your <code>.env</code> file and restart only the process within Process Compose, the process might not see the change because the old value, injected by Process Compose when it started, takes precedence. A full restart of Process Compose would be required to pick up the changes.</p>"},{"location":"configuration/#the-is_dotenv_disabled-option","title":"The <code>is_dotenv_disabled</code> Option","text":"<p>To address this, Process Compose provides the <code>is_dotenv_disabled</code> option within the process configuration.</p> <p>When set to <code>true</code>, this option instructs Process Compose not to inject environment variables sourced from its loaded <code>.env</code> files into the environment of that specific process. The process is then free to read and interpret its specified <code>.env</code> file using its own logic, without interference from variables injected by Process Compose's dotenv loading mechanism.</p> <p>Syntax:</p> <pre><code>processes:\n  &lt;process-name&gt;:\n    command: &lt;your_command&gt;\n    # ... other process options\n    # Set to true to prevent Process Compose from injecting variables\n    # loaded from its .env files into this specific process.\n    is_dotenv_disabled: true # Defaults to false if not specified\n</code></pre>"},{"location":"configuration/#important-considerations","title":"Important Considerations","text":"<ul> <li><code>is_dotenv_disabled: true</code> only affects the injection of variables loaded by Process Compose from <code>.env</code> files.</li> <li>It does not prevent the injection of variables defined in the top-level <code>environment:</code> section or the process-specific <code>environment:</code> section. These variables are always passed.</li> <li>Process Compose itself still loads the <code>.env</code> files as configured; it simply refrains from passing those specific variables to processes and their health probes marked with <code>is_dotenv_disabled: true</code>.</li> <li>Other processes managed by the same Process Compose instance will continue to receive variables from Process Compose's <code>.env</code> loading unless they also have <code>is_dotenv_disabled: true</code> set.</li> </ul>"},{"location":"configuration/#pc_env-file","title":".pc_env file","text":"<p><code>.pc_env</code> file allows you to control Process Compose local, user environment specific settings. Ideally it should contain Process Compose specific environment variables:</p> <pre><code>PC_DISABLE_TUI=1\nPC_PORT_NUM=8080\nPC_NO_SERVER=1\n</code></pre>"},{"location":"configuration/#disable-automatic-expansion","title":"Disable Automatic Expansion","text":"<p>Process Compose provides 2 ways to disable the automatic environment variables expansion:</p> <ol> <li>Escape the environment variables with <code>$$</code>. Example:    <pre><code>processes:\n foo:\n     command: echo I am $$ENV_TEST\n    environment:\n     - 'ENV_TEST=ready'\n</code></pre></li> </ol> <p>Output: <code>I am ready</code></p> <ol> <li>Globally disable the automatic expansion with <code>disable_env_expansion: true</code>. Example:    <pre><code>disable_env_expansion: true\nprocesses:\n foo:\n     command: echo I am $ENV_TEST\n    environment:\n     - 'ENV_TEST=ready'\n</code></pre></li> </ol> <p>Output: <code>I am ready</code></p> <p> Note: The default behavior for the following <code>process-compose.yaml</code>:</p> <pre><code>processes:\n foo:\n     command: echo I am $ENV_TEST\n    environment:\n     - 'ENV_TEST=ready'\n</code></pre> <p>Output: <code>I am</code></p>"},{"location":"configuration/#environment-commands","title":"Environment Commands","text":"<p>The <code>env_cmds</code> feature allows you to dynamically populate environment variables by executing short commands before starting your processes. This is useful when you need environment values that are determined at runtime or need to be fetched from the system.</p>"},{"location":"configuration/#configuration_1","title":"Configuration","text":"<p>Environment commands are defined in the <code>env_cmds</code> section of your <code>process-compose.yaml</code> file. Each entry consists of: - An environment variable name (key) - A command to execute (value)</p> <pre><code>env_cmds:\n  ENV_VAR_NAME: \"command to execute\"\n</code></pre>"},{"location":"configuration/#example-configuration","title":"Example Configuration","text":"<pre><code>env_cmds:\n  DATE: \"date\"\n  OS_NAME: \"awk -F= '/PRETTY/ {print $2}' /etc/os-release\"\n  UPTIME: \"uptime -p\"\n</code></pre>"},{"location":"configuration/#usage","title":"Usage","text":"<p>To use the environment variables populated by <code>env_cmds</code>, reference them in your process definitions using <code>$${VAR_NAME}</code> syntax:</p> <pre><code>processes:\n  my-process:\n    command: \"echo Current date is: $${DATE}\"\n</code></pre>"},{"location":"configuration/#constraints-and-considerations","title":"Constraints and Considerations","text":"<ol> <li> <p>Execution Time: Commands should complete within 2 seconds. Longer-running commands may cause process-compose startup delays or timeouts.</p> </li> <li> <p>Command Output: </p> </li> <li>Commands should output a single line of text</li> <li>The output will be trimmed of leading/trailing whitespace</li> <li> <p>The output becomes the value of the environment variable</p> </li> <li> <p>Error Handling:</p> </li> <li>If a command fails, the environment variable will not be set</li> <li>Process-compose will log any command execution errors</li> </ol>"},{"location":"configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Keep commands simple and fast-executing</li> <li>Use commands that produce consistent, predictable output</li> <li>Validate command output format before using in production</li> <li>Consider caching values that don't need frequent updates</li> </ol>"},{"location":"configuration/#example-use-cases","title":"Example Use Cases","text":"<ol> <li> <p>System Information: <pre><code>env_cmds:\n  HOSTNAME: \"hostname\"\n  KERNEL_VERSION: \"uname -r\"\n</code></pre></p> </li> <li> <p>Time-based Values: <pre><code>env_cmds:\n  TIMESTAMP: \"date +%s\"\n  DATE_ISO: \"date -u +%Y-%m-%dT%H:%M:%SZ\"\n</code></pre></p> </li> <li> <p>Resource Information: <pre><code>env_cmds:\n  AVAILABLE_MEMORY: \"free -m | awk '/Mem:/ {print $7}'\"\n  CPU_CORES: \"nproc\"\n</code></pre></p> </li> </ol>"},{"location":"configuration/#variables","title":"Variables","text":"<p>Variables in Process Compose rely on Go template engine</p>"},{"location":"configuration/#rendered-parameters","title":"Rendered Parameters:","text":"<ul> <li><code>processes.process.command</code></li> <li><code>processes.process.working_dir</code></li> <li><code>processes.process.log_location</code></li> <li><code>processes.process.description</code></li> <li><code>processes.process.environment</code> values.</li> <li>For <code>readiness_probe</code>and <code>liveness_probe</code>:</li> <li><code>processes.process.&lt;probe&gt;.exec.command</code></li> <li><code>processes.process.&lt;probe&gt;.http_get.host</code></li> <li><code>processes.process.&lt;probe&gt;.http_get.path</code></li> <li><code>processes.process.&lt;probe&gt;.http_get.scheme</code></li> <li><code>processes.process.&lt;probe&gt;.http_get.port</code></li> </ul>"},{"location":"configuration/#local-per-process_1","title":"Local (Per Process)","text":"<pre><code>processes:\n  watcher:\n    vars:\n      LOG_LOCATION: \"./watcher.log\"\n      OK: SUCCESS\n      PRE: 2\n      POST: 8\n      BASH: \"/bin/bash\"\n\n    command: \"sleep {{.PRE}} &amp;&amp; echo {{.OK}} &amp;&amp; sleep {{.POST}}\"\n    log_location: {{.LOG_LOCATION}}\n    environment:\n      - 'SHELL={{.BASH}}'\n    readiness_probe:\n      exec:\n        command: \"grep -q {{.OK}} {{.LOG_LOCATION}}\"\n      initial_delay_seconds: 1\n      period_seconds: 1\n      timeout_seconds: 1\n      success_threshold: 1      \n</code></pre> <p> Notice the <code>.</code> (dot) before each <code>.VARIABLE</code></p>"},{"location":"configuration/#global_1","title":"Global","text":"<p><pre><code>vars:\n  VERSION: v1.2.3\n  FTR_A_ENABLED: true\n  FTR_B_ENABLED: true\n\nprocesses:\n  version:\n    # Environment and Process Compose variables can complement each other\n    command: \"echo 'version {{or \\\"${VERSION}\\\" .VERSION}}'\"\n  feature:\n    command: \"echo '{{if .FTR_A_ENABLED}}Feature A Enabled{{else}}Feature A Disalbed{{end}}'\"\n  not_supported:\n    command: \"echo 'Hi {{if and .FTR_A_ENABLED .FTR_B_ENABLED}}Not Supported{{end}}'\"\n</code></pre> <pre><code>#output:\nversion v1.2.3 #if $VERSION environment variable is undefined. The value of $VERSION if it is. \nFeature A Enabled\nNot Supported\n</code></pre></p>"},{"location":"configuration/#template-escaping","title":"Template Escaping","text":"<p>In a scenario where Go template syntax is part of your command, you will want to escape it:</p> <pre><code>{{ \"{{ .SOME_VAR }}\" }}\n</code></pre> <p>For example:</p> <pre><code>processes:\n  nginx:\n    command: \"docker run -d --rm -p80:80 --name nginx_test nginx\"\n    liveness_probe:\n      exec:\n        command: '[ $(docker inspect -f \"{{.State.Running}}\" nginx_test) = true ]'\n</code></pre> <p>Will become:</p> <pre><code>processes:\n  nginx:\n    command: \"docker run -d --rm -p80:80 --name nginx_test nginx\"\n    liveness_probe:\n      exec:\n        command: '[ $(docker inspect -f {{ \"{{.State.Running}}\" }} nginx_test) = true ]'\n</code></pre>"},{"location":"configuration/#auto-inserted-variables","title":"Auto Inserted Variables","text":"<p>Process Compose will insert <code>PC_REPLICA_NUM</code> variable that will represent the replica number of the process. This will allow to conveniently scale processes using the following example configuration:</p> <pre><code>processes:  \n  server:\n    command: \"python3 -m http.server 404{{.PC_REPLICA_NUM}}\"\n    is_tty: true\n    readiness_probe:\n      http_get:\n        host: \"127.0.0.1\"\n        port: \"404{{.PC_REPLICA_NUM}}\"\n        scheme: \"http\"\n</code></pre>"},{"location":"configuration/#specify-which-configuration-files-to-use","title":"Specify which configuration files to use","text":"<pre><code>process-compose -f \"path/to/process-compose-file.yaml\"\n</code></pre>"},{"location":"configuration/#auto-discover-configuration-files","title":"Auto discover configuration files","text":"<p>The following discovery order is used: <code>compose.yml, compose.yaml, process-compose.yml, process-compose.yaml</code>. If multiple files are present the first one will be used.</p>"},{"location":"configuration/#merge-2-or-more-configuration-files-with-override-values","title":"Merge 2 or more configuration files with override values","text":"<pre><code>process-compose -f \"path/to/process-compose-file.yaml\" -f \"path/to/process-compose-override-file.yaml\"\n</code></pre> <p>Using multiple <code>process-compose</code> files lets you customize a <code>process-compose</code> application for different environments or different workflows.</p> <p>See the Merging Configuration for more information on merging files.</p>"},{"location":"configuration/#on-the-fly-configuration-edit","title":"On the Fly Configuration Edit","text":"<p>Process Compose allows you to edit processes configuration without restarting the entire project. To achieve that, select one of the following options:</p>"},{"location":"configuration/#project-edit","title":"Project Edit","text":"<p>Modify your <code>process-compose.yaml</code> file (or files) and apply the changes by running:</p> <pre><code>process-compose project update -f process-compose.yaml # add -v for verbose output, add -f for additional files to be merged\n</code></pre> <p>This command will:</p> <ol> <li>If there are changes to existing processes in the updated <code>process-compose.yaml</code> file, stop the old instances of these processes and start new instances with the updated config.</li> <li>If there are only new processes in the updated <code>process-compose.yaml</code> file, start the new processes without affecting the others.</li> <li>If some processes no longer exist in the updated <code>process-compose.yaml</code> file, stop only those old processes without touching the others.</li> </ol> <p>Note: If TUI or TUI client is being used, you can trigger the original files reload with the <code>Ctrl+L</code> shortcut.</p>"},{"location":"configuration/#process-edit","title":"Process Edit","text":"<p>To edit a single process:</p> <ol> <li>Select it in the TUI or in the TUI client.</li> <li>Press <code>CTRL+E</code></li> <li>Apply the changes, save and quit the editor.</li> <li>The process will restart with the new configuration, or won't restart if there are no changes.</li> </ol> <p> Notes:</p> <ol> <li>These changes are not persisted and not applied to your <code>process-compose.yaml</code></li> <li>In case of parsing errors or unrecognized fields:</li> <li>All the changes will be reverted to the last known correct state.</li> <li>The editor will open again with a detailed error description at the top of the file.</li> <li>Process Compose will use one of:</li> <li>Your default editor defined in <code>$EDITOR</code> environment variable. If empty:</li> <li>For non-Windows OSs: <code>vim</code>, <code>nano</code>, <code>vi</code> in that order.</li> <li>For Windows OS: <code>notepad.exe</code>, <code>notepad++.exe</code>, <code>code.exe</code>, <code>gvim.exe</code> in that order.</li> <li>Some of the fields are read only.</li> </ol>"},{"location":"configuration/#backend","title":"Backend","text":"<p>For cases where your process compose requires a non default or transferable backend definition, setting an environment variable won't do. For that, you can configure it directly in the <code>process-compose.yaml</code> file:</p> <pre><code>version: \"0.5\"\nshell:\n  shell_command: \"python3\"\n  shell_argument: \"-m\"\nprocesses:\n  http:\n    command: \"server.py\"\n</code></pre> <p>Note: please make sure that the <code>shell.shell_command</code> value is in your <code>$PATH</code></p>"},{"location":"configuration/#linux","title":"Linux","text":"<p>The default backend is <code>bash</code>. You can define a different backend with a <code>COMPOSE_SHELL</code> environment variable.</p>"},{"location":"configuration/#windows","title":"Windows","text":"<p>The default backend is <code>cmd</code>. You can define a different backend with a <code>COMPOSE_SHELL</code> environment variable.</p> <pre><code>process1:\n  command: \"python -c print(str(40+2))\"\n  #note that the same command for bash/zsh would look like: \"python -c 'print(str(40+2))'\"\n</code></pre> <p>Using <code>powershell</code> backend had some funky behavior (like missing <code>command1 &amp;&amp; command2</code> functionality in older versions). If you need to run powershell scripts, use the following syntax:</p> <pre><code>process2:\n  command: \"powershell.exe ./test.ps1 arg1 arg2 argN\"\n</code></pre>"},{"location":"configuration/#macos","title":"macOS","text":"<p>The default backend is <code>bash</code>. You can define a different backend with a <code>COMPOSE_SHELL</code> environment variable.</p>"},{"location":"configuration/#namespaces","title":"Namespaces","text":"<p>Assigning namespaces to processes allows better grouping and sorting, especially in TUI:</p> <pre><code>processes:\n  process1:\n    command: \"tail -f -n100 process-compose-${USER}.log\"\n    working_dir: \"/tmp\"\n    namespace: debug # if not defined 'default' namespace is automatically assigned to each process\n</code></pre> <p>Note: By default <code>process-compose</code> will start processes from all the configured namespaces. To start a subset of the configured namespaces (<code>ns1</code>, <code>ns2</code>, <code>ns3</code>):</p> <pre><code>process-compose -n ns1 -n ns3\n# will start only ns1 and ns3. ns2 namespace won't run and won't be visible in the TUI\n</code></pre>"},{"location":"configuration/#misc","title":"Misc","text":""},{"location":"configuration/#strict-configuration-validation","title":"Strict Configuration Validation","text":"<p>To avoid minor <code>process-compose.yaml</code> configuration errors and typos it is recommended to enable <code>is_strict</code> flag:</p> <p><pre><code>version: \"0.5\"\nis_strict: true\nprocesses:\n  process1:\n   commnad: \"sleep 1\" # &lt;-- notice the typo here\n</code></pre> The above configuration will fail the Process Compose start and exit with error code <code>1</code>: <pre><code>unknown key commnad found in process process1\n</code></pre></p>"},{"location":"configuration/#pseudo-terminals","title":"Pseudo Terminals","text":"<p>Certain processes check if they are running within a terminal, to simulate a TTY mode you can use a <code>is_tty</code> flag:</p> <pre><code>processes:  \n  process0:\n    command: \"ls -lFa --color=tty\"\n    is_tty: true\n</code></pre> <p> <code>STDIN</code> and <code>Windows</code> are not supported at this time.</p>"},{"location":"configuration/#elevated-processes","title":"Elevated Processes","text":"<p>Process Compose uses <code>sudo</code> (on Linux and macOS) and <code>runas</code> (on Windows) to enable execution of elevated processes in both TUI and headless modes.</p> <p><pre><code>processes:\n  elevated_ls:\n    description: \"run an elevated process\"\n    command: \"ls -l /root\"\n    is_elevated: true\n    shutdown:\n      signal: 9\n</code></pre> * In TUI mode, elevated processes awaiting password input are marked with a yellow \u25b2. * To enter a password in TUI mode:   1. Select the elevated process.   2. Type the password.   3. Press the <code>Enter</code> key. * To exit the password prompt, press the <code>ESC</code> key at any time. * To re-enter password mode, select the process again. * The entered password will be applied to all elevated processes in pending status.</p>"},{"location":"configuration/#ordered-shutdown","title":"Ordered Shutdown","text":"<p><pre><code>ordered_shutdown: true\n</code></pre> Shut down processes in reverse dependency order.</p> <p> ordered-shutdown can be passed as a command-line parameter when starting process-compose (see CLI), set permanently in <code>process-compose.yaml</code> (see this section), or by setting the environment variable <code>PC_ORDERED_SHUTDOWN</code>.</p>"},{"location":"configuration/#multiline-command-support","title":"Multiline Command Support","text":"<p>Process Compose respects all the multiline <code>YAML</code> specification variations. </p> <p>Examples:</p> <pre><code>processes:\n  block_folded:\n    command: &gt;\n      echo 1\n      &amp;&amp; echo 2\n\n      echo 3\n\n  block_literal:\n    command: |\n      echo 4\n      echo 5\n    depends_on:\n      block_folded:\n        condition: process_completed\n\n  flow_single:\n    command: 'echo 6\n      &amp;&amp; echo 7\n\n      echo 8'\n    depends_on:\n      block_literal:\n        condition: process_completed\n\n  flow_double:\n    command: \"echo 9\n      &amp;&amp; echo 10\n\n      echo 11\"\n    depends_on:\n      flow_single:\n        condition: process_completed\n\n  flow_plain:\n    command: echo 12\n      &amp;&amp; echo 13\n\n      echo 14\n    depends_on:\n      flow_double:\n        condition: process_completed\n</code></pre> <p> The extra blank lines (<code>\\n</code>) in the command string are to introduce a newline to the command.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#set-up-your-machine","title":"Set up your machine","text":"<p>Process Compose is written in Go.</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites:","text":"<ul> <li>Make</li> <li>Go 1.24+</li> <li>Nix - Optional, but recommended</li> </ul>"},{"location":"contributing/#clone-process-compose","title":"Clone Process Compose:","text":"<pre><code>git clone git@github.com:F1bonacc1/process-compose.git\n</code></pre> <p><code>cd</code> into the directory and install the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>You should then be able to build the binary:</p> <pre><code>make build\n</code></pre> <p>In case new packages were added (or updated), new nix vendor hash needs to be recalculated:</p> <pre><code>make nix-update-hash\n</code></pre> <p> This step requires Nix to be installed.</p>"},{"location":"contributing/#test-your-change","title":"Test your change","text":"<p>You can create a branch for your changes and try to build from the source as you go.</p> <p>When you are satisfied with the changes, we suggest you run:</p> <pre><code>make ci\n</code></pre>"},{"location":"contributing/#create-a-commit","title":"Create a commit","text":"<p>Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits.</p> <p>You can follow the documentation on their website.</p>"},{"location":"contributing/#submit-a-pull-request","title":"Submit a pull request","text":"<p>Push your branch to your <code>process-compose</code> fork and open a pull request against the main branch.</p>"},{"location":"health/","title":"Health Checks","text":"<p>Many applications running for long periods of time eventually transition to broken states, and cannot recover except by being restarted. Process Compose provides liveness and readiness probes to detect and remedy such situations.</p> <p>Probes configuration and functionality are designed to work similarly to Kubernetes liveness and readiness probes.</p>"},{"location":"health/#liveness-probe","title":"Liveness Probe","text":"<p>Liveness probes are used to monitor a daemon's state. If unhealthy, the daemon will transition to the next defined <code>availability</code> state. If it's <code>always</code> this will cause a restart, if none the daemon will transition to the completed or failed state.</p> <pre><code>processes:\n  nginx:\n    command: \"docker run -d --rm -p80:80 --name nginx_test nginx\"\n    is_daemon: true\n    shutdown:\n      command: \"docker stop nginx_test\"\n      signal: 15\n      timeout_seconds: 5\n    liveness_probe:\n      exec:\n        command: \"[ $(docker inspect -f '{{.State.Running}}' nginx_test) = 'true' ]\"\n        working_dir: /tmp # if not specified the process working dir will be used\n      initial_delay_seconds: 5\n      period_seconds: 2\n      timeout_seconds: 5\n      success_threshold: 1\n      failure_threshold: 3\n</code></pre>"},{"location":"health/#readiness-probe","title":"Readiness Probe","text":"<p>Readiness probes are used to monitor a process's state. If the process is unhealthy, it can be restarted according to the <code>availability</code> policy.</p> <pre><code>processes:\n  nginx:\n    command: \"docker run -d --rm -p80:80 --name nginx_test nginx\"\n    is_daemon: true\n    shutdown:\n      command: \"docker stop nginx_test\"\n    readiness_probe:\n      http_get:\n        host: 127.0.0.1\n        scheme: http\n        path: \"/\"\n        port: 80\n      initial_delay_seconds: 5\n      period_seconds: 10\n      timeout_seconds: 5\n      success_threshold: 1\n      failure_threshold: 3\n</code></pre> <p>Each probe type (<code>liveness_probe</code> or <code>readiness_probe</code>) can be configured to use one of the 2 mutually exclusive modes:</p> <ol> <li><code>exec</code>: Will run a configured <code>command</code> and based on the <code>exit code</code> decide if the process is in a correct state. 0 indicates success. Any other value indicates failure.</li> <li><code>http_get</code>: For an HTTP probe, the Process Compose sends an HTTP request to the specified path and port to perform the check. Response code 200 indicates success. Any other value indicates failure.</li> <li><code>host</code>: Host name to connect to.</li> <li><code>scheme</code>: Scheme to use for connecting to the host (HTTP or HTTPS). Defaults to HTTP.</li> <li><code>path</code>: Path to access on the HTTP server. Defaults to /.</li> <li><code>port</code>: Number of port to access the process. The number must be in the range 1 to 65535.</li> <li><code>headers</code>: Optional headers to send.</li> <li><code>status_code</code>: Optional. Defaults to 200.</li> </ol>"},{"location":"health/#configure-probes","title":"Configure Probes","text":"<p>Probes have a number of fields that you can use to control the behavior of liveness and readiness checks more precisely:</p> <ul> <li><code>initial_delay_seconds</code>: Number of seconds after the container has started before liveness or readiness probes are initiated. Defaults to 0 seconds. The minimum value is 0.</li> <li><code>period_seconds</code>: How often (in seconds) to perform the probe. Defaults to 10 seconds. The minimum value is 1.</li> <li><code>timeout_seconds</code>: Number of seconds after which the probe times out. Defaults to 1 second. The minimum value is 1.</li> <li><code>success_threshold</code>: Minimum consecutive successes for the probe to be considered successful after failing. Defaults to 1. Must be 1 for liveness and startup Probes. The minimum value is 1. Note: this value is not respected and was added as a placeholder for future implementation.</li> <li><code>failure_threshold</code>: When a probe fails, Process Compose will try <code>failure_threshold</code> times before giving up. Giving up in case of readiness probe means restarting the process. In case of liveness probe and <code>is_daemon</code> set to <code>true</code> the daemon will be considered stopped. Process Compose will follow the availability configuration to decide if restart is needed.  Defaults to 3. The minimum value is 1.</li> </ul>"},{"location":"health/#auto-restart-if-not-healthy","title":"Auto Restart if not Healthy","text":"<p>In order to ensure that the process is restarted (and not transitioned to a completed state) in case of readiness check fail, please make sure to define the <code>availability</code> configuration. For background (<code>is_daemon=true</code>) processes, the <code>restart</code> policy should be <code>always</code>.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#download-the-binary","title":"Download the Binary","text":""},{"location":"installation/#binary","title":"Binary","text":"<p>Go to the releases, download the package for your OS, and add to your <code>$PATH</code>.</p>"},{"location":"installation/#install-script","title":"Install Script","text":"<p>Install script which is very useful in scenarios like CI. Many thanks to GoDownloader for enabling the easy generation of this script.</p> <p>By default, it installs on the <code>./bin</code> directory relative to the working directory:</p> <pre><code>sh -c \"$(curl --location https://raw.githubusercontent.com/F1bonacc1/process-compose/main/scripts/get-pc.sh)\" -- -d\n</code></pre> <p>It is possible to override the installation directory with the <code>-b</code> parameter. On Linux, common choices are <code>~/.local/bin</code> and <code>~/bin</code> to install for the current user or <code>/usr/local/bin</code> to install for all users:</p> <pre><code>sh -c \"$(curl --location https://raw.githubusercontent.com/F1bonacc1/process-compose/main/scripts/get-pc.sh)\" -- -d -b ~/.local/bin\n</code></pre> <p>Caution</p> <p>On macOS and Windows, <code>~/.local/bin</code> and <code>~/bin</code> are not added to <code>$PATH</code> by default.</p>"},{"location":"installation/#nix","title":"Nix","text":"<p>If you have the Nix package manager installed with Flake support, just run:</p> <pre><code># to use the latest binary release\nnix run nixpkgs/master#process-compose -- --help\n\n# or to compile from the latest source\nnix run github:F1bonacc1/process-compose -- --help\n</code></pre> <p>To use process-compose declaratively configured in your project <code>flake.nix</code>, checkout process-compose-flake.</p>"},{"location":"installation/#brew-macos-and-linux","title":"Brew (MacOS and Linux)","text":"<pre><code>brew install f1bonacc1/tap/process-compose\n</code></pre>"},{"location":"intro/","title":"Getting Started","text":""},{"location":"intro/#quick-start","title":"Quick Start","text":"<p>Imaginary system diagram:</p> <p></p> <p><code>process-compose.yaml</code> definitions for the system above:</p> <pre><code>version: \"0.5\"\n\nenvironment:\n  - \"GLOBAL_ENV_VAR=1\"\nlog_location: /path/to/combined/output/logfile.log\nlog_level: debug\n\nprocesses:\n  Manager:\n    command: \"/path/to/manager\"\n    availability:\n      restart: \"always\"\n    depends_on:\n      ClientA:\n        condition: process_started\n      ClientB:\n        condition: process_started\n\n  ClientA:\n    command: \"/path/to/ClientA\"\n    availability:\n      restart: \"always\"\n    depends_on:\n      Server_1A:\n        condition: process_started\n      Server_2A:\n        condition: process_started\n    environment:\n      - \"LOCAL_ENV_VAR=1\"\n\n  ClientB:\n    command: \"/path/to/ClientB -some -arg\"\n    availability:\n      restart: \"always\"\n    depends_on:\n      Server_1B:\n        condition: process_started\n      Server_2B:\n        condition: process_started\n    environment:\n      - \"LOCAL_ENV_VAR=2\"\n\n  Server_1A:\n    command: \"/path/to/Server_1A\"\n    availability:\n      restart: \"always\"\n\n  Server_2A:\n    command: \"/path/to/Server_2A\"\n    availability:\n      restart: \"always\"\n\n  Server_1B:\n    command: \"/path/to/Server_1B\"\n    availability:\n      restart: \"always\"\n\n  Server_2B:\n    command: \"/path/to/Server_2B\"\n    availability:\n      restart: \"always\"\n</code></pre> <p>Finally, run <code>process-compose</code> in the <code>process-compose.yaml</code> directory. Or give it a direct path:</p> <pre><code>process-compose -f /path/to/process-compose.yaml\n</code></pre>"},{"location":"launcher/","title":"Processes Lifetime","text":""},{"location":"launcher/#start-in-parallel","title":"Start in Parallel","text":"<pre><code>processes:\n  process1:\n    description: This process will sleep for 2 seconds\n    command: \"sleep 2\"\n  process2:\n    description: This process will sleep for 3 seconds\n    command: \"sleep 3\"\n</code></pre> <p> It's recommended to add a process description. It will be shown in the Process Info Dialog (<code>F3</code>) in the TUI.</p>"},{"location":"launcher/#start-serially","title":"Start Serially","text":"<pre><code>processes:\n  process1:\n    command: \"sleep 3\"\n    depends_on:\n      process2:\n        condition: process_completed_successfully # or \"process_completed\" if you don't care about errors\n  process2:\n    command: \"sleep 3\"\n    depends_on:\n      process3:\n        condition: process_completed_successfully # or \"process_completed\" if you don't care about errors\n</code></pre>"},{"location":"launcher/#multiple-replicas-of-a-process","title":"Multiple Replicas of a Process","text":"<p>You can run multiple replicas of a process by adding <code>processes.process_name.replicas</code> parameter (default: 1)</p> <pre><code>processes:\n  process_name:\n    command: \"sleep 2\"\n    log_location: ./log_file.{PC_REPLICA_NUM}.log  # &lt;- {PC_REPLICA_NUM} will be replaced with replica number. If more than one replica and PC_REPLICA_NUM is not specified, the replica number will be concatenated to the file end.\n    replicas: 2\n</code></pre> <p>To scale a process on the fly CLI:</p> <pre><code>process-compose process scale process_name 3\n</code></pre> <p>To scale a process on the fly TUI: <code>F2</code> or Process Compose in client mode (<code>process-compose attach</code>).</p> <p> Starting multiple processes using the same port, will fail. Please use the injected <code>PC_REPLICA_NUM</code> environment variable to increment the used port number.</p>"},{"location":"launcher/#specify-a-working-directory","title":"Specify a working directory","text":"<pre><code>processes:\n  process1:\n    command: \"ls -laF --color=always\"\n    working_dir: \"/path/to/your/working/directory\"\n</code></pre> <p>Make sure that you have the proper access permissions to the specified <code>working_dir</code>. If not, the command will fail with a <code>permission denied</code> error. The process status in TUI will be <code>Error</code>.</p>"},{"location":"launcher/#define-process-dependencies","title":"Define process dependencies","text":"<pre><code>processes:\n  process2:\n    depends_on:\n      process3:\n        condition: process_completed_successfully\n      process4:\n        condition: process_completed_successfully\n</code></pre> <p>There are 5 condition types that can be used in process dependencies:</p> <ul> <li><code>process_completed</code> - is the type for waiting until a process has been completed (any exit code)</li> <li><code>process_completed_successfully</code> - is the type for waiting until a process has been completed successfully (exit code 0)</li> <li><code>process_healthy</code> - is the type for waiting until a process is healthy</li> <li><code>process_started</code> - is the type for waiting until a process has started (default)</li> <li><code>process_log_ready</code> - is the type for waiting until a process has printed a predefined log line. This requires the definition of <code>ready_log_line</code> in the dependent process.</li> </ul>"},{"location":"launcher/#process-log-ready-example","title":"Process Log Ready Example","text":"<p>In some situations a process's log output is a simple way to determine if it is ready or not. For example, we can wait for a 'ready' message in the process's logs as follows:</p> <pre><code>processes:\n  world:\n    command: \"echo Connected\"\n    depends_on:\n      hello:\n        condition: process_log_ready\n  hello:\n    command: |\n      echo 'Preparing...'\n      sleep 1\n      echo 'I am ready to accept connections now'\n    ready_log_line: \"ready to accept connections\" # equal to *.ready to accept connections.*\\n regex    \n</code></pre> <p> <code>ready_log_line</code> and readiness probe are incompatible and can't be used at the same time.</p>"},{"location":"launcher/#run-only-specific-processes","title":"Run only specific processes","text":"<p>For testing and debugging purposes, especially when your <code>process-compose.yaml</code> file contains many processes, you might want to specify only a subset of processes to run. For example:</p> <pre><code>#process-compose.yaml\nprocesses:\n  process1:\n    command: \"echo 'Hi from Process1'\"\n    depends_on:\n      process2:\n        condition: process_completed_successfully\n  process2:\n    command: \"echo 'Hi from Process2'\"\n  process3:\n    command: \"echo 'Hi from Process3'\"\n</code></pre> <pre><code>process-compose up # will run all the processes - equal to 'process-compose'\n\n#output:\n#Hi from Process3\n#Hi from Process2\n#Hi from Process1\n</code></pre> <pre><code>process-compose up process1 process3 # will run 'process1', 'process3' and all of their dependencies - 'process2'\n\n#output:\n#Hi from Process3\n#Hi from Process2\n#Hi from Process1\n</code></pre> <pre><code>process-compose up process1 process3 --no-deps # will run 'process1', 'process3' without any dependencies\n\n#output:\n#Hi from Process3\n#Hi from Process1\n</code></pre>"},{"location":"launcher/#termination-parameters","title":"Termination Parameters","text":"<pre><code>processes:\n  nginx:\n    command: \"docker run --rm --name nginx_test nginx\"\n    shutdown:\n      command: \"docker stop nginx_test\"\n      timeout_seconds: 10 # default 10\n      signal: 15 # default 15, but only if the 'command' is not defined or empty\n      parent_only: no  # default no. If yes, only signal the running process instead of its whole process group\n</code></pre> <p><code>shutdown</code> is optional and can be omitted. The default behavior in this case: <code>SIGTERM</code> is issued to the process group of the running process.</p> <p>In case only <code>shutdown.signal</code> is defined <code>[1..31]</code> the running process group will be terminated with its value.</p> <p>If <code>shutdown.parent_only</code> is yes, the signal is only sent to the running process and not to the whole process group.</p> <p>In case the <code>shutdown.command</code> is defined:</p> <ol> <li>The <code>shutdown.command</code> is executed with all the Environment Variables of the primary process</li> <li>Wait for <code>shutdown.timeout_seconds</code> for its completion (if not defined wait for 10 seconds)</li> <li>In case of timeout, the process group will receive the <code>SIGKILL</code> signal (irrespective of the <code>shutdown.parent_only</code> option).</li> </ol> <p>In case the <code>shutdown.timeout_seconds</code> is defined (without <code>shutdown.command</code>) and the process will fail to terminate within that time, the process group will receive the <code>SIGKILL</code> signal.</p>"},{"location":"launcher/#background-detached-processes","title":"Background (detached) Processes","text":"<pre><code>processes:\n  nginx:\n    command: \"docker run -d --rm --name nginx_test nginx\" # note the '-d' for detached mode\n    is_daemon: true # this flag is required for background processes (default false)\n    launch_timeout_seconds: 2 # default 5s\n    shutdown:\n      command: \"docker stop nginx_test\"\n      timeout_seconds: 10 # default 10\n      signal: 15 # default 15, but only if command is not defined or empty\n</code></pre> <ol> <li> <p>For processes that start services / daemons in the background, please use the <code>is_daemon</code> flag set to <code>true</code>.</p> </li> <li> <p>In case a process is daemon it will be considered running until stopped.</p> </li> <li> <p>Daemon processes can only be stopped with the <code>$PROCESSNAME.shutdown.command</code> as in the example above.</p> </li> <li> <p>If parent process (starter) won\u2019t close <code>stdout</code> and <code>stderr</code> within specified <code>launch_timeout_seconds</code>, (default 5 seconds) process compose will stop waiting for its log completion and start waiting for process termination. (more details are here)</p> </li> </ol>"},{"location":"launcher/#foreground-processes","title":"Foreground Processes","text":"<p><pre><code>processes:\n  vim:\n    command: \"vim process-compose.yaml\"\n    is_foreground: true\n</code></pre> Foreground processes are useful for cases when a full <code>tty</code> access is required (e.g. <code>vim</code>, <code>top</code>, <code>gdb -tui</code>)</p> <ol> <li>Foreground process have to be started manually (<code>F7</code>). They can be started multiple times.</li> <li>They are available in TUI mode only.</li> <li>To return to TUI, exit the foreground process.</li> <li>In TUI Client mode, a local process will be started.</li> </ol>"},{"location":"launcher/#disabled-processes","title":"Disabled Processes","text":"<p>Process execution can be disabled:</p> <pre><code>processes:\n  process_name:\n    command: \"ls -R /\"\n    disabled: true #default false\n</code></pre> <p>Even if disabled, the process is still listed in the TUI and the REST client, and can be started manually when needed.</p>"},{"location":"launcher/#auto-restart-on-exit","title":"Auto Restart on Exit","text":"<pre><code>processes:\n  process2:\n    availability:\n      restart: on_failure # other options: \"exit_on_failure\", \"always\", \"no\" (default)\n      backoff_seconds: 2 # default: 1\n      max_restarts: 5 # default: 0 (unlimited)\n</code></pre>"},{"location":"launcher/#terminate-process-compose-on-failure","title":"Terminate Process Compose on Failure","text":"<p>There are cases when you might want <code>process-compose</code> to terminate immediately when one of the processes exits with a non <code>0</code> exit code. This can be useful when you would like to perform \"pre-flight\" validation checks on the environment.</p> <p>To achieve that, use <code>exit_on_failure</code> restart policy. If defined, <code>process-compose</code> will gracefully shut down all the other running processes and exit with the same exit code as the failed process.</p> <pre><code>processes:\n  sanitycheck:\n    command: \"which go\"\n    availability:\n      restart: \"exit_on_failure\"\n\n  other_proc:\n    command: \"go test ./...\"\n    depends_on:\n      sanitycheck:\n        condition: process_completed_successfuly\n</code></pre>"},{"location":"launcher/#terminate-process-compose-once-given-process-ends","title":"Terminate Process Compose once given process ends","text":"<p>There are cases when you might want <code>process-compose</code> to terminate immediately when one of the processes exits (regardless of the exit code). For example when running tests that depend on other processes like databases etc. You might want the processes, on which the test process depends, to start first, then run the tests, and finally terminate all processes once the test process exits, reporting the code returned by the test process.</p> <p>To achieve that, set <code>availability.exit_on_end</code> to <code>true</code>, and <code>process-compose</code> will gracefully shut down all the other running processes and exit with the same exit code as the given process.</p> <pre><code>processes:\n  tests:\n    command: tests-run\n    availability:\n      # NOTE: `restart: exit_on_failure` is not needed since\n      # exit_on_end implies it.\n      exit_on_end: true\n    depends_on:\n      redis: process_healthy\n      postgres: process_healthy\n\n  redis:\n    command: redis-start\n    readiness_probe:\n      exec:\n        command: redis-health-check\n\n  postgres:\n    command: postgres-start\n    readiness_probe:\n      exec:\n        command: postgres-health-check\n</code></pre> <p> setting <code>restart: exit_on_failure</code> together with <code>exit_on_end: true</code> is not needed as the latter causes termination regardless of the exit code. However, it might be sometimes useful to <code>exit_on_end</code> with <code>restart: on_failure</code> and <code>max_restarts</code> in case you want the process to recover from failure and only cause termination on success.</p> <p> <code>exit_on_end</code> can be set on more than one process, for example when running multiple tasks in parallel and wishing to terminate as soon as any one finished.</p>"},{"location":"launcher/#terminate-process-compose-once-given-process-is-skipped","title":"Terminate Process Compose once given process is skipped","text":"<p>This can be achieved by setting <code>availability.exit_on_skipped</code> to <code>true</code>. If defined, <code>process-compose</code> will gracefully shut down all the other running processes and exit with exit-code <code>1</code>.</p> <p>Here's an example, where <code>process1</code> depends on <code>process2</code> and <code>process2</code> fails:</p> <pre><code>processes:\n  process1:\n    command: \"echo 'Hi from Process1'\"\n    depends_on:\n      process2:\n        condition: process_completed_successfully\n    availability:\n      # NOTE: `restart: exit_on_failure` is not needed since\n      # exit_on_skipped implies it.\n      exit_on_skipped: true\n  process2:\n    command: \"echo 'Hi from Process2'; exit 1\"\n  process3:\n    command: \"while true; do echo 'Running...'; sleep 1; done\"\n</code></pre> <p>Why can't the same be achieved with <code>exit_on_end</code> on <code>process2</code>? Yes, it can be, but in a case where <code>process1</code> depends on multiple processes, and failure of any of them should cause termination, <code>exit_on_skipped</code> can be used to avoid setting <code>exit_on_end</code> on all of them.</p>"},{"location":"logging/","title":"Logger","text":""},{"location":"logging/#per-process-log-collection","title":"Per Process Log Collection","text":"<pre><code>process2:\n  log_location: ./pc.process2.log #if undefined or empty no logs will be saved\n</code></pre> <p>Captures StdOut and StdErr output</p>"},{"location":"logging/#merge-into-a-single-file-unified-logging","title":"Merge into a single file (Unified Logging)","text":"<pre><code>environment:\n  - \"ABC=42\"\nlog_location: ./pc.global.log #if undefined or empty, no logs will be saved (if not defined per process)\nprocesses:\n  process2:\n    command: \"chmod 666 /path/to/file\"\n</code></pre>"},{"location":"logging/#process-compose-console-log-level","title":"Process compose console log level","text":"<pre><code>log_level: info # other options: \"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\", \"panic\"\nprocesses:\n  process2:\n    command: \"chmod 666 /path/to/file\"\n</code></pre> <p>This setting controls the <code>process-compose</code> log level. The processes log level should be defined inside the process. It is recommended to support this definition with an environment variable in <code>process-compose.yaml</code></p>"},{"location":"logging/#log-rotation","title":"Log Rotation","text":"<pre><code># unified log\nversion: \"0.5\"\nlog_level: info \nlog_location: /tmp/pc.log\nlog_configuration:\n  rotation:\n    max_size_mb: 1  # the max size in MB of the logfile before it's rolled\n    max_age_days: 3 # the max age in days to keep a logfile\n    max_backups: 3  # the max number of rolled files to keep\n    compress: true  # determines if the rotated log files should be compressed using gzip. The default is false\n\n#process level logging (same syntax)\nprocesses:\n  someProc:\n    command: \"some command\"\n    log_configuration:\n      rotation:\n        max_size_mb: 1  # the max size in MB of the logfile before it's rolled\n        max_age_days: 3 # the max age in days to keep a logfile\n        max_backups: 3  # the max number of rolled files to keep\n        compress: true  # determines if the rotated log files should be compressed using gzip. The default is false\n</code></pre>"},{"location":"logging/#logger-configuration","title":"Logger Configuration","text":"<pre><code>log_configuration:\n  fields_order: [\"time\", \"level\", \"message\"] # order of logging fields. The default is time, level, message\n  disable_json: true                         # output as plain text. The default is false\n  timestamp_format: \"06-01-02 15:04:05.000\"  # timestamp format. The default is RFC3339\n  no_metadata: true                          # don't log process name and replica number\n  add_timestamp: true                        # add timestamp to the logger. Default is false\n  no_color: true                             # disable ANSII colors in the logger. Default is false\n  flush_each_line: true                      # disable buffering and flush each line to the log file. Default is false\n</code></pre> Parameter Name Description Depends On Default Value <code>fields_order</code> Order of the logging fields. The default is time, level, message. In case one of the fields is omitted, it will be missing in the log as well. <code>disable_json: true</code><code>add_timestamp: true</code> for <code>\"time\"</code> <code>[\"time\", \"level\", \"message\"]</code> <code>disable_json</code> Disables JSON logging format. Use Console Mode Format. <code>false</code> <code>timestamp_format</code> Sets the format of the logger timestamp. <code>add_timestamp: true</code> If <code>disable_json: true</code>:<code>3:04PM</code>If <code>disable_json: false</code>:<code>\"2006-01-02T15:04:05Z07:00\"</code> <code>no_metadata</code> Don't log the process name and replica number. <code>false</code> <code>add_timestamp</code> Add timestamp to the logger. Useful for processes without an internal logger. <code>false</code> <code>no_color</code> Disable ANSII colors in the log file. <code>disable_json: true</code> <code>false</code> <code>flush_each_line</code> Disable buffering and flush each line to the log file. <code>false</code>"},{"location":"logging/#process-compose-internal-log","title":"Process Compose Internal Log","text":"<p>Default log location: <code>/tmp/process-compose-$USER.log</code></p> <p> It is recommended to add the following process configuration to your <code>process-compose.yaml</code>:</p> <pre><code>processes:\n  pc_log:\n    command: \"tail -f -n100 process-compose-${USER}.log\"\n    working_dir: \"/tmp\"\n</code></pre> <p>This will allow you to spot any issues with the processes execution, without leaving the <code>process-compose</code> TUI.</p>"},{"location":"merge/","title":"Merging Configuration","text":"<p>Using multiple <code>process-compose</code> files lets you customize a <code>process-compose</code> application for different environments or different workflows.</p>"},{"location":"merge/#understanding-multiple-compose-files","title":"Understanding multiple Compose files","text":"<p>By default, <code>process-compose</code> reads two files, a <code>process-compose.yml</code> and an optional <code>process-compose.override.yml</code> file. By convention, the <code>process-compose.yml</code> contains your base configuration. The override file, as its name implies, can contain configuration overrides for existing processes or entirely new processes.</p> <p>If a process is defined in both files, <code>process-compose</code> merges the configurations using the rules described in Adding and overriding configuration.</p> <p>To use multiple override files, or an override file with a different name, you can use the <code>-f</code> option to specify the list of files. <code>process-compose</code> merges files in the order they\u2019re specified on the command line. </p> <p>When you use multiple configuration files, you must make sure all paths in the files are relative to the base <code>process-compose</code> file (the first <code>process-compose</code> file specified with <code>-f</code>). This is required because override files need not be valid <code>process-compose</code> files. Override files can contain small fragments of configuration. Tracking which fragment of a process is relative to which path is difficult and confusing, so to keep paths easier to understand, all paths must be defined relative to the base file.</p>"},{"location":"merge/#example-use-case","title":"Example use case","text":""},{"location":"merge/#different-environments","title":"Different environments","text":"<p>A common use case for multiple files is changing a development <code>process-compose</code> app for a production-like environment (which may be production, staging or CI). To support these differences, you can split your <code>process-compose</code> configuration into a few different files:</p> <p>Start with a base file that defines the canonical configuration for the processes.</p> <p>process-compose.yml</p> <pre><code>processes:\n  web:\n    command: \"npm start\"\n    depends_on:\n      db:\n        condition: process_started\n      cache:\n        condition: process_started\n\n  db:\n    command: \"pg_ctl start -l logfile\"\n\n  cache:\n    command: \"systemctl start redis\"\n</code></pre> <p>In this example the development configuration adds debug flags.</p> <p>process-compose.override.yml</p> <pre><code>processes:\n  web:\n    environment:\n      - \"DEBUG=true\"\n\n  db:\n    command: \"pg_ctl start -l logfile -d\"\n</code></pre> <p>When you run <code>process-compose</code> it reads the overrides automatically.</p> <p>Now, it would be nice to use this <code>process-compose</code> app in a production environment. So, create another override file (which might be stored in a different git repo or managed by a different team).</p> <p>process-compose.prod.yml</p> <pre><code>processes:\n  web:\n    environment:\n      - \"PRODUCTION=true\"\n\n  cache:\n    environment:\n      - \"TTL=500\"\n</code></pre> <p>To deploy with this production <code>process-compose</code> file you can run</p> <pre><code>$ process-compose -f process-compose.yml -f process-compose.prod.yml\n</code></pre> <p>This deploys all three processes using the configuration in <code>process-compose.yml</code> and <code>process-compose.prod.yml</code> (but not the dev configuration in <code>process-compose.override.yml</code>).</p>"},{"location":"merge/#adding-and-overriding-configuration","title":"Adding and overriding configuration","text":"<p><code>process-compose</code> copies configurations from the original process over to the local one. If a configuration option is defined in both the original process and the local process, the local value replaces or extends the original value.</p> <p>For single-value options like <code>command</code>, <code>working_dir</code> or <code>disabled</code>, the new value replaces the old value.</p> <p>original process:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    command: python app.py\n</code></pre> <p>local process:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    command: python otherapp.py\n</code></pre> <p>result:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    command: python otherapp.py\n</code></pre> <p>For the multi-value options <code>environment</code>, <code>depends_on</code>, <code>process-compose</code> merges entries together with locally-defined values taking precedence:</p> <p>original process:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    environment:\n      - \"A=3\"\n      - \"C=8\"\n</code></pre> <p>local process:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    environment:\n      - \"A=4\"\n      - \"B=5\"\n</code></pre> <p>result:</p> <pre><code>processes:\n  myprocess:\n    # ...\n    environment:\n      - \"A=4\"\n      - \"B=5\"\n      - \"C=8\"\n</code></pre>"},{"location":"merge/#configuration-inheritance-with-extends","title":"Configuration Inheritance with <code>extends</code>","text":"<p><code>process-compose</code> provides the <code>extends</code> keyword to simplify configuration file inheritance:</p> <pre><code># ./some/dir/process-compose.prod.yaml\nversion: \"0.5\"\nextends: \"process-compose.yaml\"\n\nprocesses:\n</code></pre> <pre><code># ./some/dir/process-compose.yaml\nversion: \"0.5\"\n\nprocesses:\n</code></pre> <p>This is equivalent to running:</p> <pre><code>$ process-compose -f ./some/dir/process-compose.yaml -f ./some/dir/process-compose.prod.yaml\n</code></pre> <p>And allows you to use the shorter command:</p> <pre><code>$ process-compose -f ./some/dir/process-compose.prod.yaml\n</code></pre> <p>With the same result.</p> <p>Notes:</p> <ol> <li>Inheritance chains are limited only by available memory.</li> <li>Circular inheritance will cause loading to fail.</li> <li>The <code>extends</code> path is relative to the extending file's location (as shown in the example above).</li> <li>Absolute paths are automatically detected and used as-is.</li> <li>The <code>.env</code> file is loaded only from the <code>CWD</code>. Additional env files can be specified using <code>--env</code> (<code>-e</code>).</li> <li>If file <code>B</code> uses the <code>extends</code> keyword to extend file <code>A</code>, loading both with <code>process-compose up -f A -f B</code> will fail. Load only the last file in the chain with <code>process-compose -f B</code> instead.</li> </ol>"},{"location":"merge/#controlling-process-enabled-status-with-is_disabled","title":"Controlling Process Enabled Status with <code>is_disabled</code>","text":""},{"location":"merge/#the-challenge-overriding-disabled-false","title":"The Challenge: Overriding <code>disabled: false</code>","text":"<p>In <code>process-compose</code>, you can define processes in multiple configuration files (e.g., a base <code>process-compose.yaml</code> and an <code>override.yaml</code>). These files are merged to produce the final configuration.</p> <p>A common scenario is wanting to disable a process by default in the base configuration and then enable it specifically in an override file. The natural way to attempt this would be:</p> <p><code>base.yaml</code>:</p> <pre><code>processes:\n  my_process:\n    command: \"echo 'running process'\"\n    disabled: true\n</code></pre> <p><code>override.yaml</code>:</p> <pre><code>processes:\n  my_process:\n    # Attempt to enable the process\n    disabled: false\n</code></pre> <p>However, due to the underlying configuration merging library (<code>mergo</code>) and how Go handles boolean types, this approach has limitations. In Go, the \"zero value\" for a boolean is <code>false</code>. When merging, the library might struggle to distinguish between a <code>disabled</code> field that was explicitly set to <code>false</code> in the override file and a <code>disabled</code> field that was simply not present in the override file (which would also result in a <code>false</code> value after initialization). This ambiguity can lead to the override <code>disabled: false</code> not reliably enabling the process as intended.</p>"},{"location":"merge/#the-solution-introducing-is_disabled-string","title":"The Solution: Introducing <code>is_disabled</code> (string)","text":"<p>To provide a reliable way to enable or disable processes via overriding configuration files, we have introduced a new configuration option: <code>is_disabled</code>.</p> <p>Key characteristics of <code>is_disabled</code>:</p> <ol> <li>Type: It is a string, not a boolean.</li> <li>Values: It accepts the string values <code>\"true\"</code> or <code>\"false\"</code>.</li> <li>Purpose: It allows you to explicitly signal your intent to enable or disable a process during configuration merging, overcoming the boolean zero-value ambiguity.</li> </ol>"},{"location":"merge/#how-to-use-is_disabled","title":"How to Use <code>is_disabled</code>","text":"<p>You can now use <code>is_disabled</code> in your override files to reliably control the process state:</p> <p><code>base.yaml</code>:</p> <pre><code>processes:\n  my_process:\n    command: \"echo 'running process'\"\n    # Can be disabled using either field in the base file\n    disabled: true\n    # or is_disabled: \"true\"\n</code></pre> <p><code>override.yaml</code> (to enable the process):</p> <pre><code>processes:\n  my_process:\n    # Use is_disabled as a string to reliably enable\n    is_disabled: \"false\"\n</code></pre> <p><code>override.yaml</code> (to explicitly disable the process, if it wasn't already):</p> <pre><code>processes:\n  my_process:\n    # Use is_disabled as a string to reliably disable\n    is_disabled: \"true\"\n</code></pre> <p>Because <code>\"false\"</code> is not the zero value for a string (which is <code>\"\"</code>), the merging logic can clearly distinguish between an explicitly set <code>is_disabled: \"false\"</code> and an unset field.</p>"},{"location":"merge/#relationship-between-disabled-and-is_disabled","title":"Relationship Between <code>disabled</code> and <code>is_disabled</code>","text":"<p>Both <code>disabled</code> (boolean) and <code>is_disabled</code> (string) can coexist, but <code>is_disabled</code> takes precedence:</p> <ol> <li>If <code>is_disabled</code> is set (to either <code>\"true\"</code> or <code>\"false\"</code> in the final merged configuration): Its value determines whether the process is disabled or enabled. The value of the <code>disabled</code> field is ignored.</li> <li>If <code>is_disabled</code> is *not* set: The value of the <code>disabled</code> boolean field determines the state. If <code>disabled</code> is also not set, the process defaults to being enabled (<code>disabled: false</code>).</li> </ol> <p>Recommendation:</p> <ul> <li>For standard configuration within a single file or when not dealing with complex override scenarios to enable a process, you can continue using the boolean <code>disabled</code> field (<code>disabled: true</code> or <code>disabled: false</code>).</li> <li>When using override files specifically to enable a process that might be disabled in a base file, use <code>is_disabled: \"false\"</code> in the override file for guaranteed results.</li> <li>You can also use <code>is_disabled: \"true\"</code> in override files if you prefer consistency, although <code>disabled: true</code> generally works reliably for disabling.</li> </ul>"},{"location":"sponsors/","title":"Sponsors","text":"<p>Do you or your company use Process Compose? You can help keep the project bug-free and feature rich by sponsoring the project and its contributors.</p>"},{"location":"sponsors/#github-sponsors","title":"GitHub Sponsors","text":"<p>GitHub Sponsors is a great way to contribute directly to the Process Compose maintainer, f1bonnacc1.</p> <p>This money usually goes to buying coffee, snacks, better hardware, and, hopefully, one day, paying the bills.</p> <p>You can sponsor and see who's sponsoring f1bonacc1 here.</p> <p>And, of course, you can also sponsor any of the contributors!</p> <p>\ud83d\udd25\ud83d\udd25 Thanks for your support! \ud83d\udd25\ud83d\udd25</p>"},{"location":"tui/","title":"TUI (Terminal User Interface)","text":"<p>TUI Allows you to:</p> <ul> <li>Review processes status</li> <li>Start processes (only completed or disabled)</li> <li>Stop processes</li> <li>Review logs</li> <li>Restart running processes</li> <li>Edit processes' configuration</li> </ul> <p>TUI is the default run mode, but it's possible to disable it:</p> <pre><code>./process-compose -t=false\n</code></pre> <p>Alternatively it can be disabled with <code>PC_DISABLE_TUI=1</code> environment variable or in <code>process-compose.yaml</code>:</p> <pre><code>version: \"0.5\"\nis_tui_disabled: true\n</code></pre> <p>Control the UI log buffer size:</p> <pre><code>log_level: info\nlog_length: 1200 #default: 1000\nprocesses:\n  process2:\n    command: \"ls -R /\"\n</code></pre> <p> Using a too large buffer will put more penalty on your CPU.</p> <p>By default <code>process-compose</code> uses the standard ANSI colors mode to display logs. However, you can disable it for each process:</p> <pre><code>processes:\n  process_name:\n    command: \"ls -R /\"\n    disable_ansi_colors: true #default false\n</code></pre> <p> Too long log lines (above 2^16 bytes long) can cause the log collector to hang.</p>"},{"location":"tui/#shortcuts-configuration","title":"Shortcuts Configuration","text":"<p>Default shortcuts can be changed by placing <code>shortcuts.yaml</code> in your <code>$XDG_CONFIG_HOME/process-compose/</code> directory. The default <code>process-compose</code> configuration is defined as:</p> <pre><code># $XDG_CONFIG_HOME/process-compose/shortcuts.yaml\nshortcuts:\n  log_follow: # action name - don't edit\n    toggle_description: # optional description for toggle buttons. Will use default if not defined\n      false: Follow Off\n      true: Follow On\n    shortcut: F5 # shortcut to be used\n  log_screen:\n    toggle_description:\n      false: Half Screen\n      true: Full Screen\n    shortcut: F4\n  log_wrap:\n    toggle_description:\n      false: Wrap Off\n      true: Wrap On\n    shortcut: F6\n  process_restart:\n    description: Restart # optional description for a button. Will use default if not defined\n    shortcut: Ctrl-R\n  process_screen:\n    toggle_description:\n      false: Half Screen\n      true: Full Screen\n    shortcut: F8\n  process_start:\n    description: Start\n    shortcut: F7\n  process_stop:\n    description: Stop\n    shortcut: F9\n  quit:\n    description: Quit\n    shortcut: F10\n</code></pre> <p><code>shortcuts.yaml</code> can contain only the values you wish to change, default values will be used for the rest. For example if you want to replace the default <code>quit</code> shortcut to be <code>F3</code> instead of <code>F10</code> and rename the <code>process_stop</code> to be <code>Terminate</code>, the configurion will be as follows: <pre><code># $XDG_CONFIG_HOME/process-compose/shortcuts.yaml\nshortcuts:\n  process_stop:\n    description: Terminate\n  quit:\n    shortcut: F3\n</code></pre></p>"},{"location":"tui/#tui-themes","title":"TUI Themes","text":"<p>The default shortcut for theme selection is <code>CTRL-T</code>. Process Compose comes with 4 pre-loaded themes.  These can be extended in 2 ways:</p> <ol> <li>By contributing a new theme, by creating a PR with a new theme in the <code>src/config/themes</code> directory.</li> <li>Adding your own theme by placing <code>theme.yaml</code> in your <code>$XDG_CONFIG_HOME/process-compose/</code> directory.</li> </ol> <p>The default <code>process-compose</code> theme is defined as:</p> <pre><code>style:\n  body:\n    fgColor: white\n    bgColor: black\n    secondaryTextColor: yellow\n    tertiaryTextColor: green\n    borderColor: white\n  stat_table:\n    keyFgColor: yellow\n    valueFgColor: white\n    logoColor: yellow\n  proc_table:\n    fgColor: lightskyblue\n    fgWarning: yellow\n    fgPending: grey\n    fgCompleted: lightgreen\n    fgError: red\n    headerFgColor: white\n  help:\n    fgColor: black\n    keyColor: white\n    hlColor: green\n    categoryFgColor: lightskyblue\n  dialog:\n    fgColor: cadetblue\n    bgColor: black\n    buttonFgColor: black\n    buttonBgColor: lightskyblue\n    buttonFocusFgColor: black\n    buttonFocusBgColor: dodgerblue\n    labelFgColor: yellow\n    fieldFgColor: black\n    fieldBgColor: lightskyblue\n</code></pre> <p><code>theme.yaml</code> can contain only the values you wish to change, default values will be used for the rest. For example if you want to change the default background color to <code>green</code> instead of <code>black</code> and the logo color to <code>blue</code>, the configuration will be as follows:</p> <pre><code>style:\n  body:\n    bgColor: green\n  stat_table:\n    logoColor: blue\n</code></pre> <p> To apply the new values it's enough to select the <code>Custom Style</code> (<code>F</code> shortcut) theme from the theme selector menu (<code>CTRL-T</code>).</p> <p>For Color names W3C approved color names should be used. Note that on various terminals colors may be approximated, or not supported at all.  If no suitable representation for a color is known, the no color will be set, deferring to whatever default attributes the terminal uses.</p> <p>By default <code>process-compose</code> will respect any theme used in your terminal which might result in less accurate color fidelity. To force the use of \"True Colors\", please use the <code>HEX</code> color notation:</p> <pre><code>style:\n  body:\n    bgColor: '#00FF00' #green\n  stat_table:\n    logoColor: '#0000FF' #blue\n</code></pre>"},{"location":"tui/#tui-state-settings","title":"TUI State Settings","text":"<p>TUI will automatically save its state after changing the following:</p> <ol> <li>TUI Theme</li> <li>Processes sort column</li> <li>Processes sort order (ascending / descending)</li> </ol> <p><code>settings.yaml</code> file location <code>$XDG_CONFIG_HOME/process-compose/</code></p>"},{"location":"tui/#settings-structure","title":"Settings Structure","text":"<pre><code>#XDG_CONFIG_HOME/process-compose/settings.yaml\n\ntheme: Cobalt\nsort:\n    by: NAME\n    isReversed: false\ndisable_exit_confirmation: false # if true, will disable the TUI exit confirmation dialog\n</code></pre> <p> The auto save feature can be disabled by using the <code>--read-only</code> flag.</p>"},{"location":"cli/process-compose/","title":"process-compose","text":""},{"location":"cli/process-compose/#process-compose","title":"process-compose","text":"<p>Processes scheduler and orchestrator</p> <pre><code>process-compose [flags]\n</code></pre>"},{"location":"cli/process-compose/#options","title":"Options","text":"<pre><code>  -f, --config stringArray       path to config files to load (env: PC_CONFIG_FILES)\n      --detach-on-success        detach the process-compose TUI after successful startup. Requires --detached-with-tui\n  -D, --detached                 run process-compose in detached mode\n      --detached-with-tui        run process-compose in detached mode with TUI\n      --disable-dotenv           disable .env file loading (env: PC_DISABLE_DOTENV=1)\n      --dry-run                  validate the config and exit\n  -e, --env stringArray          path to env files to load (default [.env])\n  -h, --help                     help for process-compose\n  -d, --hide-disabled            hide disabled processes (env: PC_HIDE_DISABLED_PROC)\n      --keep-project             keep the project running even after all processes exit\n  -L, --log-file string          Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --logs-truncate            truncate process logs buffer on startup\n  -n, --namespace stringArray    run only specified namespaces (default all)\n      --no-server                disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown         shut down processes in reverse dependency order\n  -p, --port int                 port number (env: PC_PORT_NUM) (default 8080)\n      --read-only                enable read-only mode (env: PC_READ_ONLY)\n      --recursive-metrics        collect metrics recursively (env: PC_RECURSIVE_METRICS)\n  -r, --ref-rate duration        TUI refresh interval in seconds or as a Go duration string (e.g. 1s) (default 1)\n  -R, --reverse                  sort in reverse order\n      --shortcuts stringArray    paths to shortcut config files to load (env: PC_SHORTCUTS_FILES) (default [/home/&lt;user&gt;/.config/process-compose/shortcuts.yml])\n      --slow-ref-rate duration   Slow(er) refresh interval for resources (CPU, RAM) in seconds or as a Go duration string (e.g. 1s). The value should be higher than --ref-rate (default 1)\n  -S, --sort string              sort column name. legal values (case insensitive): [AGE, CPU, EXIT, HEALTH, MEM, NAME, NAMESPACE, PID, RESTARTS, STATUS] (default \"NAME\")\n      --theme string             select process compose theme (default \"Default\")\n  -t, --tui                      enable TUI (disable with -t=false) (env: PC_DISABLE_TUI) (default true)\n      --tui-fs                   enable TUI full screen (env: PC_TUI_FULL_SCREEN=1)\n  -u, --unix-socket string       path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds                  use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose attach    - Attach the Process Compose TUI Remotely to a Running Process Compose Server</li> <li>process-compose completion    - Generate the autocompletion script for the specified shell</li> <li>process-compose down    - Stops all the running processes and terminates the Process Compose</li> <li>process-compose info    - Print configuration info</li> <li>process-compose list    - List available processes</li> <li>process-compose process  - Execute operations on the available processes</li> <li>process-compose project  - Execute operations on a running Process Compose project</li> <li>process-compose recipe    - Manage process-compose recipes</li> <li>process-compose run  - Run PROCESS in the foreground, and its dependencies in the background</li> <li>process-compose up    - Run process compose project</li> <li>process-compose version  - Print version and build info</li> </ul>"},{"location":"cli/process-compose_attach/","title":"attach","text":""},{"location":"cli/process-compose_attach/#process-compose-attach","title":"process-compose attach","text":"<p>Attach the Process Compose TUI Remotely to a Running Process Compose Server</p> <pre><code>process-compose attach [flags]\n</code></pre>"},{"location":"cli/process-compose_attach/#options","title":"Options","text":"<pre><code>  -a, --address string      address of the target process compose server (default \"localhost\")\n  -h, --help                help for attach\n  -l, --log-length int      log length to display in TUI (default 1000)\n  -r, --ref-rate duration   TUI refresh rate in seconds or as a Go duration string (e.g. 1s) (default 1)\n  -R, --reverse             sort in reverse order\n  -S, --sort string         sort column name. legal values (case insensitive): [AGE, CPU, EXIT, HEALTH, MEM, NAME, NAMESPACE, PID, RESTARTS, STATUS] (default \"NAME\")\n      --theme string        select process compose theme (default \"Default\")\n</code></pre>"},{"location":"cli/process-compose_attach/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_attach/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_completion/","title":"completion","text":""},{"location":"cli/process-compose_completion/#process-compose-completion","title":"process-compose completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cli/process-compose_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for process-compose for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cli/process-compose_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cli/process-compose_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> <li>process-compose completion bash  - Generate the autocompletion script for bash</li> <li>process-compose completion fish  - Generate the autocompletion script for fish</li> <li>process-compose completion powershell  - Generate the autocompletion script for powershell</li> <li>process-compose completion zsh    - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cli/process-compose_completion_bash/","title":"Process compose completion bash","text":""},{"location":"cli/process-compose_completion_bash/#process-compose-completion-bash","title":"process-compose completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cli/process-compose_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(process-compose completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/process-compose_completion_bash/#linux","title":"Linux:","text":"<pre><code>process-compose completion bash &gt; /etc/bash_completion.d/process-compose\n</code></pre>"},{"location":"cli/process-compose_completion_bash/#macos","title":"macOS:","text":"<pre><code>process-compose completion bash &gt; $(brew --prefix)/etc/bash_completion.d/process-compose\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>process-compose completion bash\n</code></pre>"},{"location":"cli/process-compose_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/process-compose_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/process-compose_completion_fish/","title":"Process compose completion fish","text":""},{"location":"cli/process-compose_completion_fish/#process-compose-completion-fish","title":"process-compose completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cli/process-compose_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>process-compose completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>process-compose completion fish &gt; ~/.config/fish/completions/process-compose.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>process-compose completion fish [flags]\n</code></pre>"},{"location":"cli/process-compose_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/process-compose_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/process-compose_completion_powershell/","title":"Process compose completion powershell","text":""},{"location":"cli/process-compose_completion_powershell/#process-compose-completion-powershell","title":"process-compose completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cli/process-compose_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>process-compose completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>process-compose completion powershell [flags]\n</code></pre>"},{"location":"cli/process-compose_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/process-compose_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/process-compose_completion_zsh/","title":"Process compose completion zsh","text":""},{"location":"cli/process-compose_completion_zsh/#process-compose-completion-zsh","title":"process-compose completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cli/process-compose_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(process-compose completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cli/process-compose_completion_zsh/#linux","title":"Linux:","text":"<pre><code>process-compose completion zsh &gt; \"${fpath[1]}/_process-compose\"\n</code></pre>"},{"location":"cli/process-compose_completion_zsh/#macos","title":"macOS:","text":"<pre><code>process-compose completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_process-compose\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>process-compose completion zsh [flags]\n</code></pre>"},{"location":"cli/process-compose_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cli/process-compose_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose completion    - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cli/process-compose_down/","title":"down","text":""},{"location":"cli/process-compose_down/#process-compose-down","title":"process-compose down","text":"<p>Stops all the running processes and terminates the Process Compose</p> <pre><code>process-compose down [flags]\n</code></pre>"},{"location":"cli/process-compose_down/#options","title":"Options","text":"<pre><code>  -a, --address string   address of the target process compose server (default \"localhost\")\n  -h, --help             help for down\n</code></pre>"},{"location":"cli/process-compose_down/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_down/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_info/","title":"info","text":""},{"location":"cli/process-compose_info/#process-compose-info","title":"process-compose info","text":"<p>Print configuration info</p> <pre><code>process-compose info [flags]\n</code></pre>"},{"location":"cli/process-compose_info/#options","title":"Options","text":"<pre><code>  -h, --help   help for info\n</code></pre>"},{"location":"cli/process-compose_info/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_info/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_list/","title":"Process compose list","text":""},{"location":"cli/process-compose_list/#process-compose-list","title":"process-compose list","text":"<p>List available processes</p> <pre><code>process-compose list [flags]\n</code></pre>"},{"location":"cli/process-compose_list/#options","title":"Options","text":"<pre><code>  -h, --help            help for list\n  -o, --output string   Output format. One of: (json, wide)\n</code></pre>"},{"location":"cli/process-compose_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_list/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_process/","title":"process","text":""},{"location":"cli/process-compose_process/#process-compose-process","title":"process-compose process","text":"<p>Execute operations on the available processes</p>"},{"location":"cli/process-compose_process/#options","title":"Options","text":"<pre><code>  -a, --address string   address of the target process compose server (default \"localhost\")\n  -h, --help             help for process\n</code></pre>"},{"location":"cli/process-compose_process/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> <li>process-compose process get  - Get a process state</li> <li>process-compose process list    - List available processes</li> <li>process-compose process logs    - Fetch the logs of a process(es). For multiple processes, separate them with a comma (proc1,proc2)</li> <li>process-compose process ports  - Get the ports that a process is listening on</li> <li>process-compose process restart  - Restart a process</li> <li>process-compose process scale  - Scale a process to a given count</li> <li>process-compose process start  - Start a process</li> <li>process-compose process stop    - Stop running processes</li> </ul>"},{"location":"cli/process-compose_process_get/","title":"Process compose process get","text":""},{"location":"cli/process-compose_process_get/#process-compose-process-get","title":"process-compose process get","text":"<p>Get a process state</p> <pre><code>process-compose process get [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_get/#options","title":"Options","text":"<pre><code>  -h, --help            help for get\n  -o, --output string   Output format. One of: (json, wide (default))\n</code></pre>"},{"location":"cli/process-compose_process_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_get/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_list/","title":"Process compose process list","text":""},{"location":"cli/process-compose_process_list/#process-compose-process-list","title":"process-compose process list","text":"<p>List available processes</p> <pre><code>process-compose process list [flags]\n</code></pre>"},{"location":"cli/process-compose_process_list/#options","title":"Options","text":"<pre><code>  -h, --help            help for list\n  -o, --output string   Output format. One of: (json, wide)\n</code></pre>"},{"location":"cli/process-compose_process_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_list/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_list/#auto-generated-by-spf13cobra-on-13-sep-2024","title":"Auto generated by spf13/cobra on 13-Sep-2024","text":""},{"location":"cli/process-compose_process_logs/","title":"Process compose process logs","text":""},{"location":"cli/process-compose_process_logs/#process-compose-process-logs","title":"process-compose process logs","text":"<p>Fetch the logs of a process(es). For multiple processes, separate them with a comma (proc1,proc2)</p> <pre><code>process-compose process logs [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_logs/#options","title":"Options","text":"<pre><code>  -f, --follow             Follow log output\n  -h, --help               help for logs\n  -N, --namespace string   Logs all the processes in the given namespace\n      --raw-log            If set, don't format the multi process log output to include the process name\n  -n, --tail int           Number of lines to show from the end of the logs (default 9223372036854775807)\n</code></pre>"},{"location":"cli/process-compose_process_logs/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_logs/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> <li>process-compose process logs truncate  - Truncate the logs for a running or stopped process</li> </ul>"},{"location":"cli/process-compose_process_logs_truncate/","title":"Process compose process logs truncate","text":""},{"location":"cli/process-compose_process_logs_truncate/#process-compose-process-logs-truncate","title":"process-compose process logs truncate","text":"<p>Truncate the logs for a running or stopped process</p> <pre><code>process-compose process logs truncate [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_logs_truncate/#options","title":"Options","text":"<pre><code>  -h, --help   help for truncate\n</code></pre>"},{"location":"cli/process-compose_process_logs_truncate/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_logs_truncate/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process logs    - Fetch the logs of a process(es). For multiple processes, separate them with a comma (proc1,proc2)</li> </ul>"},{"location":"cli/process-compose_process_ports/","title":"Process compose process ports","text":""},{"location":"cli/process-compose_process_ports/#process-compose-process-ports","title":"process-compose process ports","text":"<p>Get the ports that a process is listening on</p> <pre><code>process-compose process ports [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_ports/#options","title":"Options","text":"<pre><code>  -h, --help   help for ports\n</code></pre>"},{"location":"cli/process-compose_process_ports/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_ports/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_restart/","title":"Process compose process restart","text":""},{"location":"cli/process-compose_process_restart/#process-compose-process-restart","title":"process-compose process restart","text":"<p>Restart a process</p> <pre><code>process-compose process restart [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_restart/#options","title":"Options","text":"<pre><code>  -h, --help   help for restart\n</code></pre>"},{"location":"cli/process-compose_process_restart/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_restart/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_scale/","title":"Process compose process scale","text":""},{"location":"cli/process-compose_process_scale/#process-compose-process-scale","title":"process-compose process scale","text":"<p>Scale a process to a given count</p> <pre><code>process-compose process scale [PROCESS] [COUNT] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_scale/#options","title":"Options","text":"<pre><code>  -h, --help   help for scale\n</code></pre>"},{"location":"cli/process-compose_process_scale/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_scale/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_start/","title":"Process compose process start","text":""},{"location":"cli/process-compose_process_start/#process-compose-process-start","title":"process-compose process start","text":"<p>Start a process</p> <pre><code>process-compose process start [PROCESS] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"cli/process-compose_process_start/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_start/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_process_stop/","title":"Process compose process stop","text":""},{"location":"cli/process-compose_process_stop/#process-compose-process-stop","title":"process-compose process stop","text":"<p>Stop running processes</p> <pre><code>process-compose process stop [PROCESS...] [flags]\n</code></pre>"},{"location":"cli/process-compose_process_stop/#options","title":"Options","text":"<pre><code>  -h, --help      help for stop\n  -v, --verbose   verbose output\n</code></pre>"},{"location":"cli/process-compose_process_stop/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_process_stop/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose process  - Execute operations on the available processes</li> </ul>"},{"location":"cli/process-compose_project/","title":"project","text":""},{"location":"cli/process-compose_project/#process-compose-project","title":"process-compose project","text":"<p>Execute operations on a running Process Compose project</p>"},{"location":"cli/process-compose_project/#options","title":"Options","text":"<pre><code>  -a, --address string   address of the target process compose server (default \"localhost\")\n  -h, --help             help for project\n</code></pre>"},{"location":"cli/process-compose_project/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_project/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> <li>process-compose project is-ready    - Check if Process Compose project is ready (or wait for it to be ready)</li> <li>process-compose project state  - Get Process Compose project state</li> <li>process-compose project update    - Update an already running process-compose instance by passing an updated process-compose.yaml file</li> </ul>"},{"location":"cli/process-compose_project_is-ready/","title":"Process compose project is ready","text":""},{"location":"cli/process-compose_project_is-ready/#process-compose-project-is-ready","title":"process-compose project is-ready","text":"<p>Check if Process Compose project is ready (or wait for it to be ready)</p> <pre><code>process-compose project is-ready [flags]\n</code></pre>"},{"location":"cli/process-compose_project_is-ready/#options","title":"Options","text":"<pre><code>  -h, --help   help for is-ready\n      --wait   Wait for the project to be ready instead of exiting with an error\n</code></pre>"},{"location":"cli/process-compose_project_is-ready/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_project_is-ready/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose project  - Execute operations on a running Process Compose project</li> </ul>"},{"location":"cli/process-compose_project_state/","title":"Process compose project state","text":""},{"location":"cli/process-compose_project_state/#process-compose-project-state","title":"process-compose project state","text":"<p>Get Process Compose project state</p> <pre><code>process-compose project state [flags]\n</code></pre>"},{"location":"cli/process-compose_project_state/#options","title":"Options","text":"<pre><code>  -h, --help          help for state\n      --with-memory   check memory usage\n</code></pre>"},{"location":"cli/process-compose_project_state/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_project_state/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose project  - Execute operations on a running Process Compose project</li> </ul>"},{"location":"cli/process-compose_project_update/","title":"Process compose project update","text":""},{"location":"cli/process-compose_project_update/#process-compose-project-update","title":"process-compose project update","text":"<p>Update an already running process-compose instance by passing an updated process-compose.yaml file</p> <pre><code>process-compose project update [flags]\n</code></pre>"},{"location":"cli/process-compose_project_update/#options","title":"Options","text":"<pre><code>  -f, --config stringArray      path to config files to load (env: PC_CONFIG_FILES)\n  -h, --help                    help for update\n  -n, --namespace stringArray   run only specified namespaces (default all)\n  -v, --verbose                 verbose output\n</code></pre>"},{"location":"cli/process-compose_project_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -a, --address string       address of the target process compose server (default \"localhost\")\n  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_project_update/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose project  - Execute operations on a running Process Compose project</li> </ul>"},{"location":"cli/process-compose_recipe/","title":"Process compose recipe","text":""},{"location":"cli/process-compose_recipe/#process-compose-recipe","title":"process-compose recipe","text":"<p>Manage process-compose recipes</p>"},{"location":"cli/process-compose_recipe/#synopsis","title":"Synopsis","text":"<p>Manage process-compose recipes from the community repository.</p> <p>Recipes are pre-configured process-compose.yaml files for common use cases like databases, message queues, and other services.</p>"},{"location":"cli/process-compose_recipe/#options","title":"Options","text":"<pre><code>  -h, --help   help for recipe\n</code></pre>"},{"location":"cli/process-compose_recipe/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> <li>process-compose recipe list  - List locally installed recipes</li> <li>process-compose recipe pull  - Pull a recipe from the repository</li> <li>process-compose recipe remove  - Remove a locally installed recipe</li> <li>process-compose recipe search  - Search for recipes in the repository</li> <li>process-compose recipe show  - Show the content of a local recipe</li> </ul>"},{"location":"cli/process-compose_recipe_list/","title":"Process compose recipe list","text":""},{"location":"cli/process-compose_recipe_list/#process-compose-recipe-list","title":"process-compose recipe list","text":"<p>List locally installed recipes</p>"},{"location":"cli/process-compose_recipe_list/#synopsis","title":"Synopsis","text":"<p>List all recipes that have been pulled and are available locally.</p> <pre><code>process-compose recipe list [flags]\n</code></pre>"},{"location":"cli/process-compose_recipe_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"cli/process-compose_recipe_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe_list/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose recipe    - Manage process-compose recipes</li> </ul>"},{"location":"cli/process-compose_recipe_pull/","title":"Process compose recipe pull","text":""},{"location":"cli/process-compose_recipe_pull/#process-compose-recipe-pull","title":"process-compose recipe pull","text":"<p>Pull a recipe from the repository</p>"},{"location":"cli/process-compose_recipe_pull/#synopsis","title":"Synopsis","text":"<p>Download and install a recipe from the process-compose recipes repository.</p> <p>The recipe will be downloaded to your local recipes directory and can be used with 'process-compose -f ~/.process-compose/recipes/[recipe-name]/process-compose.yaml'</p> <pre><code>process-compose recipe pull [recipe-name] [flags]\n</code></pre>"},{"location":"cli/process-compose_recipe_pull/#options","title":"Options","text":"<pre><code>  -f, --force           Force pull even if recipe exists locally\n  -h, --help            help for pull\n  -o, --output string   Output path for the recipe\n</code></pre>"},{"location":"cli/process-compose_recipe_pull/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe_pull/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose recipe    - Manage process-compose recipes</li> </ul>"},{"location":"cli/process-compose_recipe_remove/","title":"Process compose recipe remove","text":""},{"location":"cli/process-compose_recipe_remove/#process-compose-recipe-remove","title":"process-compose recipe remove","text":"<p>Remove a locally installed recipe</p>"},{"location":"cli/process-compose_recipe_remove/#synopsis","title":"Synopsis","text":"<p>Remove a recipe from your local recipes directory.</p> <pre><code>process-compose recipe remove [recipe-name] [flags]\n</code></pre>"},{"location":"cli/process-compose_recipe_remove/#options","title":"Options","text":"<pre><code>  -h, --help   help for remove\n</code></pre>"},{"location":"cli/process-compose_recipe_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose recipe    - Manage process-compose recipes</li> </ul>"},{"location":"cli/process-compose_recipe_search/","title":"Process compose recipe search","text":""},{"location":"cli/process-compose_recipe_search/#process-compose-recipe-search","title":"process-compose recipe search","text":"<p>Search for recipes in the repository</p>"},{"location":"cli/process-compose_recipe_search/#synopsis","title":"Synopsis","text":"<p>Search for recipes in the process-compose recipes repository.</p> <p>You can search by name, description, author, or tags.</p> <pre><code>process-compose recipe search [query] [flags]\n</code></pre>"},{"location":"cli/process-compose_recipe_search/#options","title":"Options","text":"<pre><code>  -a, --author string   Filter by author\n  -h, --help            help for search\n  -t, --tags strings    Filter by tags\n</code></pre>"},{"location":"cli/process-compose_recipe_search/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe_search/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose recipe    - Manage process-compose recipes</li> </ul>"},{"location":"cli/process-compose_recipe_show/","title":"Process compose recipe show","text":""},{"location":"cli/process-compose_recipe_show/#process-compose-recipe-show","title":"process-compose recipe show","text":"<p>Show the content of a local recipe</p>"},{"location":"cli/process-compose_recipe_show/#synopsis","title":"Synopsis","text":"<p>Display the process-compose.yaml content of a locally installed recipe to stdout.</p> <pre><code>process-compose recipe show [recipe-name] [flags]\n</code></pre>"},{"location":"cli/process-compose_recipe_show/#options","title":"Options","text":"<pre><code>  -h, --help               help for show\n  -s, --syntax-highlight   Highlight the recipe yaml syntax\n</code></pre>"},{"location":"cli/process-compose_recipe_show/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_recipe_show/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose recipe    - Manage process-compose recipes</li> </ul>"},{"location":"cli/process-compose_run/","title":"run","text":""},{"location":"cli/process-compose_run/#process-compose-run","title":"process-compose run","text":"<p>Run PROCESS in the foreground, and its dependencies in the background</p>"},{"location":"cli/process-compose_run/#synopsis","title":"Synopsis","text":"<p>Run selected process with std(in|out|err) attached, while other processes run in the background. Command line arguments, provided after --, are passed to the PROCESS.</p> <pre><code>process-compose run PROCESS [flags] -- [process_args]\n</code></pre>"},{"location":"cli/process-compose_run/#options","title":"Options","text":"<pre><code>  -f, --config stringArray   path to config files to load (env: PC_CONFIG_FILES)\n      --disable-dotenv       disable .env file loading (env: PC_DISABLE_DOTENV=1)\n  -h, --help                 help for run\n      --no-deps              don't start dependent processes\n</code></pre>"},{"location":"cli/process-compose_run/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_run/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_up/","title":"up","text":""},{"location":"cli/process-compose_up/#process-compose-up","title":"process-compose up","text":"<p>Run process compose project</p>"},{"location":"cli/process-compose_up/#synopsis","title":"Synopsis","text":"<p>Run all the process compose processes. If one or more process names are passed as arguments, will start them and their dependencies only</p> <pre><code>process-compose up [PROCESS...] [flags]\n</code></pre>"},{"location":"cli/process-compose_up/#options","title":"Options","text":"<pre><code>  -f, --config stringArray       path to config files to load (env: PC_CONFIG_FILES)\n      --detach-on-success        detach the process-compose TUI after successful startup. Requires --detached-with-tui\n  -D, --detached                 run process-compose in detached mode\n      --detached-with-tui        run process-compose in detached mode with TUI\n      --disable-dotenv           disable .env file loading (env: PC_DISABLE_DOTENV=1)\n      --dry-run                  validate the config and exit\n  -e, --env stringArray          path to env files to load (default [.env])\n  -h, --help                     help for up\n  -d, --hide-disabled            hide disabled processes (env: PC_HIDE_DISABLED_PROC)\n      --keep-project             keep the project running even after all processes exit\n      --logs-truncate            truncate process logs buffer on startup\n  -n, --namespace stringArray    run only specified namespaces (default all)\n      --no-deps                  don't start dependent processes\n      --recursive-metrics        collect metrics recursively (env: PC_RECURSIVE_METRICS)\n  -r, --ref-rate duration        TUI refresh interval in seconds or as a Go duration string (e.g. 1s) (default 1)\n  -R, --reverse                  sort in reverse order\n      --shortcuts stringArray    paths to shortcut config files to load (env: PC_SHORTCUTS_FILES) (default [/home/&lt;user&gt;/.config/process-compose/shortcuts.yml])\n      --slow-ref-rate duration   Slow(er) refresh interval for resources (CPU, RAM) in seconds or as a Go duration string (e.g. 1s). The value should be higher than --ref-rate (default 1)\n  -S, --sort string              sort column name. legal values (case insensitive): [AGE, CPU, EXIT, HEALTH, MEM, NAME, NAMESPACE, PID, RESTARTS, STATUS] (default \"NAME\")\n      --theme string             select process compose theme (default \"Default\")\n  -t, --tui                      enable TUI (disable with -t=false) (env: PC_DISABLE_TUI) (default true)\n</code></pre>"},{"location":"cli/process-compose_up/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_up/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"},{"location":"cli/process-compose_version/","title":"version","text":""},{"location":"cli/process-compose_version/#process-compose-version","title":"process-compose version","text":"<p>Print version and build info</p> <pre><code>process-compose version [flags]\n</code></pre>"},{"location":"cli/process-compose_version/#options","title":"Options","text":"<pre><code>  -h, --help    help for version\n      --short   Print only version\n</code></pre>"},{"location":"cli/process-compose_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -L, --log-file string      Specify the log file path (env: PC_LOG_FILE) (default \"/tmp/process-compose-&lt;user&gt;.log\")\n      --no-server            disable HTTP server (env: PC_NO_SERVER)\n      --ordered-shutdown     shut down processes in reverse dependency order\n  -p, --port int             port number (env: PC_PORT_NUM) (default 8080)\n      --read-only            enable read-only mode (env: PC_READ_ONLY)\n  -u, --unix-socket string   path to unix socket (env: PC_SOCKET_PATH) (default \"/tmp/process-compose-&lt;pid&gt;.sock\")\n  -U, --use-uds              use unix domain sockets instead of tcp\n</code></pre>"},{"location":"cli/process-compose_version/#see-also","title":"SEE ALSO","text":"<ul> <li>process-compose  - Processes scheduler and orchestrator</li> </ul>"}]}